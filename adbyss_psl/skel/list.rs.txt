use crate::NoHashState;
use once_cell::sync::Lazy;
use std::collections::HashMap;



/// # Suffix List.
type Map = HashMap<u64, Psl, NoHashState>;

#[derive(Clone, Copy, Eq, Hash, PartialEq)]
/// # Suffix Kinds.
pub(super) enum Psl {{
	Normal,
	Wild,
{psl_kinds}
}}

impl Psl {{
	/// # Is Wildcard Match?
	pub(super) fn is_wild_match(self, src: &[u8]) -> bool {{
		match self {{
{psl_kind_arms}
			Self::Normal | Self::Wild => false,
		}}
	}}
}}

/// # Weird Suffixes.
pub(super) static MAP: Lazy<Map> = Lazy::new(|| {{
	let mut out: Map = HashMap::with_capacity_and_hasher({len}, NoHashState::default());
	out.extend([
{inserts}
	]);
	out
}});
